#!/bin/bash

set -Eeo pipefail

NHS_SERVICE=mhs
AWS_REGION=eu-west-2

CERTIFICATES_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )/mhs-certs"

if [ -z "${MHS_IMAGE_TAG}" ]; then
  MHS_IMAGE_TAG="${GO_REVISION_INTEGRATION_ADAPTORS:-alpha}"
fi

function tf_plan {
  operation=$1

  cd terraform/
  terraform init -backend-config key=${NHS_SERVICE}-${NHS_ENVIRONMENT}/terraform.tfstate
  terraform get # modules
  if [[ "${operation}" == "create" ]]; then
    terraform plan -var build_id=$MHS_IMAGE_TAG -var-file=${NHS_ENVIRONMENT}.tfvars -out="nhs_deployment.tfplan"
  elif [[ "${operation}" == "destroy" ]]; then
    terraform plan -var build_id=$MHS_IMAGE_TAG -var-file=${NHS_ENVIRONMENT}.tfvars -out="nhs_deployment.tfplan" -destroy
  else
    echo "Unknown operation (should be create or destroy), got: ${operation}"
    exit 1
  fi
}

function tf_apply {
  cd terraform/
  terraform init -backend-config key=${NHS_SERVICE}-${NHS_ENVIRONMENT}/terraform.tfstate
  terraform get # modules
  terraform apply nhs_deployment.tfplan
  terraform output -json > tf-out.json
}

function check_env {
  if [[ -z "${NHS_ENVIRONMENT}" ]]; then
    echo "Must set NHS_ENVIRONMENT"
    exit 1
  fi
}

function generate_ssh_key {
  secret_id="/NHS/deductions/mhs-opentest/id_rsa"
  ssh_directory=terraform/transit-opentest/ssh
  mkdir -p ${ssh_directory}/
  if [[ ! -f "${ssh_directory}/id_rsa" ]]; then
    #TODO check aws authentication
    set +e
    id_rsa=$(aws ssm get-parameter --with-decryption --region $AWS_REGION --name $secret_id | jq -r ".Parameter.Value")
    if [[ $? == 0 ]]; then
      echo "$id_rsa" > ${ssh_directory}/id_rsa
    else
      set -e
      ssh-keygen -f "${ssh_directory}/id_rsa" -q -N ""
    fi
    set -e
  fi
  chmod 0600 ${ssh_directory}/id_rsa
  ssh-keygen -y -f "${ssh_directory}/id_rsa" > "${ssh_directory}/id_rsa.pub"
  aws ssm put-parameter \
   --region $AWS_REGION \
   --name $secret_id \
   --type SecureString \
   --overwrite \
   --value "`cat ${ssh_directory}/id_rsa`"
}


function generate_csr {
  keys_file_name="$1"
  # If you intend to secure the URL https://www.yourdomain.com, then your CSRâ€™s common name must be www.yourdomain.com
  common_name="$2"
  fqdn=$common_name

  if [[ -z "$keys_file_name" ]]; then
    echo "Keys filename missing"
    exit 1
  fi
  if [[ -z "$common_name" ]]; then
    echo "domain name missing"
    exit 1
  fi

  echo "Preparing certificates for: ${keys_file_name} on ${fqdn}, common_name: ${common_name}"
  mkdir -p $CERTIFICATES_DIR

  # 1. Create a config file for generating a Certificate Signing Request (CSR).
  cat <<EOF >${CERTIFICATES_DIR}/csr.conf
[ req ]
default_bits = 2048
prompt = no
default_md = sha256
req_extensions = req_ext
distinguished_name = dn

[ dn ]
CN = ${common_name}

[ req_ext ]
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = ${fqdn}

[ v3_ext ]
authorityKeyIdentifier=keyid,issuer:always
basicConstraints=CA:FALSE
keyUsage=keyEncipherment,dataEncipherment
extendedKeyUsage=serverAuth,clientAuth
subjectAltName=@alt_names
EOF

  # 2. Create a private key (${keys_file_name}.key) and then generate a certificate request (${keys_file_name}.csr) from it.
  # https://www.openssl.org/docs/manmaster/man1/req.html
  openssl genrsa -out ${keys_file_name}.key 2048
  openssl req -new -key ${keys_file_name}.key -out ${keys_file_name}.csr -config ${CERTIFICATES_DIR}/csr.conf
}

command="$1"
case "${command}" in
  _ssh_key)
      check_env
      generate_ssh_key
      ;;
  ssh_key)
      dojo "./tasks _ssh_key"
      ;;
  tf)
      check_env
      ./tasks ssh_key
      dojo "bash"
      ;;
  _tf_plan)
      tf_plan "$2"
      ;;
  tf_plan)
      check_env
      ./tasks ssh_key
      dojo "./tasks _tf_plan $2"
      ;;
  _tf_apply)
      tf_apply
      ;;
  tf_apply)
      check_env
      ./tasks ssh_key
      dojo "./tasks _tf_apply"
      ;;
  _nlb_ips)
      cd terraform-patch
      terraform init -backend-config key=${NHS_SERVICE}-${NHS_ENVIRONMENT}/terraform-patch.tfstate
      terraform apply -auto-approve -var environment=$NHS_ENVIRONMENT
      ;;
  nlb_ips)
      check_env
      dojo "./tasks _nlb_ips"
      ;;
  _generate_certs)
      check_env
      rm -rf support
      git clone https://github.com/nhsconnect/prm-deductions-support-infra.git support
      cd support
      ./utils/generate-certs.sh -f mhs-outbound.$NHS_ENVIRONMENT -d "mhs-outbound.$NHS_ENVIRONMENT.internal-mhs.nhs.net"
      ./utils/generate-certs.sh -f mhs-route.$NHS_ENVIRONMENT -d "mhs-route.$NHS_ENVIRONMENT.internal-mhs.nhs.net"
      ;;
  generate_certs)
      dojo "./tasks _generate_certs"
      ;;
  _csr)
      check_env
      fqdn="mhs-inbound-$NHS_ENVIRONMENT-x26.mhs.patient-deductions.nhs.uk"
      generate_csr "mhs-inbound-$NHS_ENVIRONMENT-x26" $fqdn
      echo "The CSR has to be sent together with endpoint registration. Use the form below or ask endpoint admin to register it"
      echo "https://digital.nhs.uk/forms/combined-endpoint-and-service-registration-request"
      ;;
  _upload_certs)
      if [ "${NHS_ENVIRONMENT}" == "dev" ]; then
        outbound_alb_certificate_arn="arn:aws:acm:eu-west-2:327778747031:certificate/67279db0-17f9-4517-8572-eb739ae6808b"
        route_alb_certificate_arn="arn:aws:acm:eu-west-2:327778747031:certificate/3630471e-0ca2-4aec-a7f1-ef78258c8283"
      elif [ "${NHS_ENVIRONMENT}" == "test" ]; then
        outbound_alb_certificate_arn="arn:aws:acm:eu-west-2:327778747031:certificate/4289f294-49b4-4949-84ca-11cda3e84a59"
        route_alb_certificate_arn="arn:aws:acm:eu-west-2:327778747031:certificate/5eed36c1-6aba-4909-be94-b50019bb57b0"
      else
        echo "Not supported environment: '${NHS_ENVIRONMENT}'"
        # To add new env, just update this script. First-time upload should not include --certificate-arn option
        exit 2
      fi
      aws acm import-certificate \
        --certificate-arn $outbound_alb_certificate_arn \
        --region $AWS_REGION \
        --certificate file://support/utils/site-certs/mhs-outbound.$NHS_ENVIRONMENT.crt \
        --private-key file://support/utils/site-certs/mhs-outbound.$NHS_ENVIRONMENT.key \
        --certificate-chain file://support/utils/site-certs/ca.crt
      aws acm import-certificate \
        --certificate-arn $route_alb_certificate_arn \
        --region $AWS_REGION \
        --certificate file://support/utils/site-certs/mhs-route.$NHS_ENVIRONMENT.crt \
        --private-key file://support/utils/site-certs/mhs-route.$NHS_ENVIRONMENT.key \
        --certificate-chain file://support/utils/site-certs/ca.crt
      ;;
  upload_certs)
      dojo "./tasks _upload_certs"
      ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
